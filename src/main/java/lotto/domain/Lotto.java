package lotto.domain;

import lotto.view.InputView;
import lotto.view.ResultView;

import java.util.*;
import java.util.stream.Collectors;

public class Lotto {

	private static final int LOTTO_PRICE_PER_SHEET = 1000;

	private static final int LOTTO_NUMBER_MAX_COUNT = 6;

	private static final int TOTAL_LOTTO_NUMBER_MAX = 45;

	private static final String COMMA = ",";

	private Scanner scanner = new Scanner(System.in);

	InputView inputView = new InputView();

	ResultView resultView = new ResultView();

	private int purchaseAmount;

	private int lottoTryCount;

	private List<Integer> defaultLottoNumbers = new ArrayList<>();

	private List<Integer> lastWeekPrizeNumbers = new ArrayList<>();

	private List<List> autoGeneratedLottos = new ArrayList<>();

	public Lotto() {
		for (int i = 0; i < TOTAL_LOTTO_NUMBER_MAX; i++) {
			this.defaultLottoNumbers.add(i + 1);
		}
	}

	public void start() {
		printInputUI();

		autoGeneratedLottos = generateAutoLottoNumbers(lottoTryCount);

		printLottoNumberUI(autoGeneratedLottos);

		printLastPrizeInput();

		List<Integer> lottoResultList = new ArrayList<>();
		LottoResult lottoResult = new LottoResult();

		for (List<Integer> autoGeneratedLotto : autoGeneratedLottos) {
			int matchCount = getMatchCount(lastWeekPrizeNumbers, autoGeneratedLotto);
			lottoResultList.add(matchCount);
		}
		lottoResult.arrangePrize(lottoResultList, LOTTO_PRICE_PER_SHEET);

		resultView.printMatchUI(3, lottoResult.THREE_MATCH_PRIZE_MONEY, lottoResult.getThreeMatchCount());
		resultView.printMatchUI(4, lottoResult.FOUR_MATCH_PRIZE_MONEY,  lottoResult.getFourMatchCount());
		resultView.printMatchUI(5, lottoResult.FIVE_MATCH_PRIZE_MONEY,  lottoResult.getFiveMatchCount());
		resultView.printMatchUI(6, lottoResult.SIX_MATCH_PRIZE_MONEY,  lottoResult.getSixMatchCount());

		resultView.printEarningRateUI(lottoResult.getEarningsRate());
	}

	private void printInputUI() {
		inputView.print("구입금액을 입력해 주세요.");
		this.purchaseAmount = scanner.nextInt();
		this.lottoTryCount = calculateLottoCount(this.purchaseAmount, LOTTO_PRICE_PER_SHEET);
		inputView.print(String.format("%d개를 구매했습니다.", lottoTryCount));
	}

	public int calculateLottoCount(int purchaseAmount, int lottoPricePerSheet) {
		return purchaseAmount / lottoPricePerSheet;
	}

	public List<List> generateAutoLottoNumbers(int lottoCount) {
		for (int i = 0; i < lottoCount; i++) {
			List<Integer> lottoNumber = generateLotto();
			autoGeneratedLottos.add(lottoNumber);
		}
		return autoGeneratedLottos;
	}

	private List<Integer> generateLotto() {
		Collections.shuffle(defaultLottoNumbers);
		List<Integer> lottoNumber = new ArrayList<>();
		for (int i = 0; i < LOTTO_NUMBER_MAX_COUNT; i++) {
			lottoNumber.add(defaultLottoNumbers.get(i));
		}
		return lottoNumber;
	}

	private void printLottoNumberUI(List<List> autoGeneratedLottoNumbers) {
		for (List lottoNumber : autoGeneratedLottoNumbers) {
			inputView.print(lottoNumber.toString());
		}
		inputView.print("");
	}

	private void printLastPrizeInput() {
		inputView.print("지난 주 당첨 번호를 입력해 주세요.");
		String lastWeekPrizeNumber = scanner.next();
		System.out.println(lastWeekPrizeNumber);
		lastWeekPrizeNumbers  = convertStringToInteger(lastWeekPrizeNumber);
		System.out.println();
	}

	public List<Integer> convertStringToInteger(String lastWeekPrizeNumberInput) throws IllegalArgumentException {
		List<Integer> lastWeekPrizeNumberList = new ArrayList<>();
		String[] lastWeekPrizeNumberArr = lastWeekPrizeNumberInput.split(COMMA);
		for (int i = 0; i < lastWeekPrizeNumberArr.length; i++) {
			Integer number = Integer.parseInt(lastWeekPrizeNumberArr[i].trim());
			lastWeekPrizeNumberList.add(number);
		}
		Set<Integer> validateSet = lastWeekPrizeNumberList.stream().collect(Collectors.toSet());
		if (validateSet.size() != 6) {
			throw new IllegalArgumentException();
		}
		return lastWeekPrizeNumberList;
	}

	public int getMatchCount(List<Integer> lastWeekPrizeNumberList, List<Integer> autoGeneratedLotto) {
		int matchCount = 0;
		for (Integer lotto : autoGeneratedLotto) {
			matchCount = countMatchNumber(lastWeekPrizeNumberList, lotto, matchCount);
		}
		return matchCount;
	}

	private int countMatchNumber(List<Integer> lastWeekPrizeNumberList, Integer lotto, int matchCount) {
		if (lastWeekPrizeNumberList.contains(lotto)) {
			matchCount = matchCount + 1;
		}
		return matchCount;
	}

}
